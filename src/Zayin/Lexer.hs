{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-tabs #-}
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# LANGUAGE CPP #-}
{-# LINE 1 "src/Zayin/Lexer.x" #-}
module Zayin.Lexer where

import Control.Monad.State
import Control.Monad.Except
import Zayin.Lexer.Support

import Debug.Trace
#include "ghcconfig.h"
import qualified Data.Array
import Data.Char (chr)
import qualified Debug.Trace
alex_tab_size :: Int
alex_tab_size = 8
alex_base :: Data.Array.Array Int Int
alex_base = Data.Array.listArray (0 :: Int, 75)
  [ -8
  , 107
  , 117
  , 143
  , 169
  , 195
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -42
  , 0
  , 0
  , -57
  , -56
  , 0
  , 0
  , 0
  , 205
  , 280
  , 355
  , 430
  , 505
  , 580
  , 0
  , 0
  , 21
  , 47
  , -4
  , 0
  , -38
  , -2
  , 0
  , 0
  , 0
  , 0
  , -36
  , 1
  , 0
  , 2
  , 3
  , 6
  , 0
  , 10
  , 655
  , 730
  , 805
  , 880
  , 955
  , 1030
  , 1105
  , 1180
  , 1255
  , 1330
  , 1405
  , 1480
  , 1555
  , 1630
  , 1705
  , 1780
  , 1855
  , 1930
  , 2005
  , 2080
  , 2155
  , 2230
  , 2305
  , 2380
  , 2455
  , 0
  , 0
  , 0
  , 0
  , 0
  ]

alex_table :: Data.Array.Array Int Int
alex_table = Data.Array.listArray (0 :: Int, 2710)
  [ 0
  , 43
  , 27
  , 42
  , 17
  , 18
  , -1
  , 33
  , 34
  , 39
  , 0
  , 40
  , 44
  , 26
  , 0
  , 43
  , 0
  , 0
  , 0
  , 0
  , 72
  , 0
  , 0
  , 0
  , 43
  , 0
  , 19
  , 0
  , 0
  , 0
  , -1
  , -1
  , 74
  , 75
  , 13
  , 11
  , 10
  , 12
  , 43
  , 14
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 8
  , 9
  , 15
  , 73
  , 16
  , -1
  , 29
  , -1
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 0
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 29
  , 0
  , -1
  , 0
  , 0
  , 71
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 22
  , 67
  , 56
  , 56
  , 69
  , 56
  , 56
  , 20
  , 59
  , 21
  , 56
  , 56
  , 56
  , 56
  , 56
  , 24
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 6
  , 43
  , 7
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 43
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 43
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 43
  , 0
  , 0
  , 43
  , 35
  , 0
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 43
  , 0
  , 0
  , 43
  , 37
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 32
  , 0
  , 0
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 43
  , 0
  , 0
  , 29
  , -1
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 38
  , 0
  , 0
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 45
  , 29
  , 0
  , 31
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 28
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 36
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 70
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 62
  , 56
  , 56
  , 56
  , 56
  , 56
  , 61
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 23
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 68
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 25
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 66
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 60
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 57
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 58
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 55
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 54
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 53
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 52
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 63
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 64
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 51
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 65
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 50
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 49
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 48
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 47
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 56
  , 0
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 46
  , 56
  , 56
  , 56
  , 56
  , 56
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  ]

alex_check :: Data.Array.Array Int Int
alex_check = Data.Array.listArray (0 :: Int, 2710)
  [ -1
  , 9
  , 10
  , 45
  , 61
  , 61
  , 10
  , 45
  , 10
  , 45
  , -1
  , 10
  , 10
  , 10
  , -1
  , 9
  , -1
  , -1
  , -1
  , -1
  , 62
  , -1
  , -1
  , -1
  , 32
  , -1
  , 34
  , -1
  , -1
  , -1
  , 34
  , 10
  , 40
  , 41
  , 42
  , 43
  , 44
  , 45
  , 32
  , 47
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 58
  , 59
  , 60
  , 61
  , 62
  , 34
  , 9
  , 10
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 32
  , -1
  , 34
  , -1
  , -1
  , 92
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 123
  , 9
  , 125
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 9
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 32
  , -1
  , -1
  , 9
  , 10
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 32
  , -1
  , -1
  , 9
  , 10
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 45
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 32
  , -1
  , -1
  , 9
  , 10
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 45
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 32
  , -1
  , 34
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , 123
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , 95
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_deflt :: Data.Array.Array Int Int
alex_deflt = Data.Array.listArray (0 :: Int, 75)
  [ -1
  , -1
  , -1
  , -1
  , -1
  , 30
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 30
  , 30
  , 30
  , -1
  , -1
  , 33
  , -1
  , -1
  , -1
  , -1
  , -1
  , 39
  , -1
  , -1
  , 42
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_accept = Data.Array.listArray (0 :: Int, 75)
  [ AlexAccNone
  , AlexAcc 62
  , AlexAcc 61
  , AlexAcc 60
  , AlexAcc 59
  , AlexAcc 58
  , AlexAcc 57
  , AlexAcc 56
  , AlexAcc 55
  , AlexAcc 54
  , AlexAcc 53
  , AlexAcc 52
  , AlexAcc 51
  , AlexAcc 50
  , AlexAcc 49
  , AlexAcc 48
  , AlexAcc 47
  , AlexAcc 46
  , AlexAcc 45
  , AlexAcc 44
  , AlexAcc 43
  , AlexAcc 42
  , AlexAcc 41
  , AlexAcc 40
  , AlexAcc 39
  , AlexAcc 38
  , AlexAcc 37
  , AlexAcc 36
  , AlexAcc 35
  , AlexAccSkip
  , AlexAcc 34
  , AlexAcc 33
  , AlexAccNone
  , AlexAccNone
  , AlexAccSkip
  , AlexAccSkip
  , AlexAcc 32
  , AlexAccSkip
  , AlexAccNone
  , AlexAccNone
  , AlexAccSkip
  , AlexAccNone
  , AlexAccNone
  , AlexAccSkip
  , AlexAccSkip
  , AlexAcc 31
  , AlexAccPred 30 (alexRightContext 41)(AlexAcc 29)
  , AlexAcc 28
  , AlexAcc 27
  , AlexAcc 26
  , AlexAcc 25
  , AlexAcc 24
  , AlexAcc 23
  , AlexAcc 22
  , AlexAcc 21
  , AlexAcc 20
  , AlexAcc 19
  , AlexAcc 18
  , AlexAcc 17
  , AlexAcc 16
  , AlexAcc 15
  , AlexAcc 14
  , AlexAcc 13
  , AlexAcc 12
  , AlexAcc 11
  , AlexAcc 10
  , AlexAcc 9
  , AlexAcc 8
  , AlexAcc 7
  , AlexAcc 6
  , AlexAcc 5
  , AlexAcc 4
  , AlexAcc 3
  , AlexAcc 2
  , AlexAcc 1
  , AlexAcc 0
  ]

alex_actions = Data.Array.array (0 :: Int, 63)
  [ (62,alex_action_41)
  , (61,alex_action_45)
  , (60,alex_action_40)
  , (59,alex_action_44)
  , (58,alex_action_35)
  , (57,alex_action_19)
  , (56,alex_action_20)
  , (55,alex_action_21)
  , (54,alex_action_22)
  , (53,alex_action_23)
  , (52,alex_action_24)
  , (51,alex_action_25)
  , (50,alex_action_26)
  , (49,alex_action_27)
  , (48,alex_action_28)
  , (47,alex_action_29)
  , (46,alex_action_30)
  , (45,alex_action_31)
  , (44,alex_action_32)
  , (43,alex_action_13)
  , (42,alex_action_13)
  , (41,alex_action_13)
  , (40,alex_action_13)
  , (39,alex_action_13)
  , (38,alex_action_13)
  , (37,alex_action_33)
  , (36,alex_action_34)
  , (35,alex_action_1)
  , (34,alex_action_35)
  , (33,alex_action_36)
  , (32,alex_action_39)
  , (31,alex_action_1)
  , (30,alex_action_2)
  , (29,alex_action_3)
  , (28,alex_action_4)
  , (27,alex_action_5)
  , (26,alex_action_6)
  , (25,alex_action_7)
  , (24,alex_action_8)
  , (23,alex_action_9)
  , (22,alex_action_10)
  , (21,alex_action_11)
  , (20,alex_action_12)
  , (19,alex_action_13)
  , (18,alex_action_13)
  , (17,alex_action_13)
  , (16,alex_action_13)
  , (15,alex_action_13)
  , (14,alex_action_13)
  , (13,alex_action_13)
  , (12,alex_action_13)
  , (11,alex_action_13)
  , (10,alex_action_13)
  , (9,alex_action_13)
  , (8,alex_action_13)
  , (7,alex_action_13)
  , (6,alex_action_13)
  , (5,alex_action_13)
  , (4,alex_action_14)
  , (3,alex_action_15)
  , (2,alex_action_16)
  , (1,alex_action_17)
  , (0,alex_action_18)
  ]


empty_layout,eof,layout,newline,string :: Int
empty_layout = 1
eof = 2
layout = 3
newline = 4
string = 5
alex_action_1 = emit (TkIntLit . read)
alex_action_2 = layoutKw TkLet
alex_action_3 = token TkLet
alex_action_4 = token TkIn
alex_action_5 = token TkIf
alex_action_6 = token TkElse
alex_action_7 = token TkFn
alex_action_8 = token TkTrue
alex_action_9 = token TkFalse
alex_action_10 = token TkNil
alex_action_11 = token TkNot
alex_action_12 = token TkMacro
alex_action_13 = emit TkIdent
alex_action_14 = token TkBackslash
alex_action_15 = token TkArrow
alex_action_16 = token TkEqual
alex_action_17 = token TkLParen
alex_action_18 = token TkRParen
alex_action_19 = token TkOpen
alex_action_20 = token TkClose
alex_action_21 = token TkColon
alex_action_22 = token TkSemi
alex_action_23 = token TkComma
alex_action_24 = token TkPlus
alex_action_25 = token TkMinus
alex_action_26 = token TkStar
alex_action_27 = token TkSlash
alex_action_28 = token TkLT
alex_action_29 = token TkGT
alex_action_30 = token TkLEQ
alex_action_31 = token TkGEQ
alex_action_32 = beginString
alex_action_33 = \_ -> pushStartCode newline *> scan
alex_action_34 = \_ -> pushStartCode newline *> scan
alex_action_35 = emit TkStringLit
alex_action_36 = endString
alex_action_39 = openBrace
alex_action_40 = startLayout
alex_action_41 = emptyLayout
alex_action_44 = offsideRule
alex_action_45 = doEOF

#define ALEX_LATIN1 1
#define ALEX_DEBUG 1
-- -----------------------------------------------------------------------------
-- ALEX TEMPLATE
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.

-- -----------------------------------------------------------------------------
-- INTERNALS and main scanner engine

#ifdef ALEX_GHC
#  define ILIT(n) n#
#  define IBOX(n) (I# (n))
#  define FAST_INT Int#
-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.
#  if __GLASGOW_HASKELL__ > 706
#    define GTE(n,m) (GHC.Exts.tagToEnum# (n >=# m))
#    define EQ(n,m) (GHC.Exts.tagToEnum# (n ==# m))
#  else
#    define GTE(n,m) (n >=# m)
#    define EQ(n,m) (n ==# m)
#  endif
#  define PLUS(n,m) (n +# m)
#  define MINUS(n,m) (n -# m)
#  define TIMES(n,m) (n *# m)
#  define NEGATE(n) (negateInt# (n))
#  define IF_GHC(x) (x)
#else
#  define ILIT(n) (n)
#  define IBOX(n) (n)
#  define FAST_INT Int
#  define GTE(n,m) (n >= m)
#  define EQ(n,m) (n == m)
#  define PLUS(n,m) (n + m)
#  define MINUS(n,m) (n - m)
#  define TIMES(n,m) (n * m)
#  define NEGATE(n) (negate (n))
#  define IF_GHC(x)
#endif

#ifdef ALEX_GHC
data AlexAddr = AlexA# Addr#
-- Do not remove this comment. Required to fix CPP parsing when using GCC and a clang-compiled alex.

{-# INLINE alexIndexInt16OffAddr #-}
alexIndexInt16OffAddr :: AlexAddr -> Int# -> Int#
alexIndexInt16OffAddr (AlexA# arr) off =
#if __GLASGOW_HASKELL__ >= 901
  GHC.Exts.int16ToInt# -- qualified import because it doesn't exist on older GHC's
#endif
#ifdef WORDS_BIGENDIAN
  (GHC.Exts.word16ToInt16# (GHC.Exts.wordToWord16# (GHC.Exts.byteSwap16# (GHC.Exts.word16ToWord# (GHC.Exts.int16ToWord16#
#endif
  (indexInt16OffAddr# arr off)
#ifdef WORDS_BIGENDIAN
  )))))
#endif
#else
alexIndexInt16OffAddr = (Data.Array.!)
#endif

#ifdef ALEX_GHC
{-# INLINE alexIndexInt32OffAddr #-}
alexIndexInt32OffAddr :: AlexAddr -> Int# -> Int#
alexIndexInt32OffAddr (AlexA# arr) off =
#if __GLASGOW_HASKELL__ >= 901
  GHC.Exts.int32ToInt# -- qualified import because it doesn't exist on older GHC's
#endif
#ifdef WORDS_BIGENDIAN
  (GHC.Exts.word32ToInt32# (GHC.Exts.wordToWord32# (GHC.Exts.byteSwap32# (GHC.Exts.word32ToWord# (GHC.Exts.int32ToWord32#
#endif
  (indexInt32OffAddr# arr off)
#ifdef WORDS_BIGENDIAN
  )))))
#endif
#else
alexIndexInt32OffAddr = (Data.Array.!)
#endif

#ifdef ALEX_GHC
-- GHC >= 503, unsafeAt is available from Data.Array.Base.
quickIndex = unsafeAt
#else
quickIndex = (Data.Array.!)
#endif

-- -----------------------------------------------------------------------------
-- Main lexing routines

data AlexReturn a
  = AlexEOF
  | AlexError  !AlexInput
  | AlexSkip   !AlexInput !Int
  | AlexToken  !AlexInput !Int a

-- alexScan :: AlexInput -> StartCode -> AlexReturn a
alexScan input__ IBOX(sc)
  = alexScanUser (error "alex rule requiring context was invoked by alexScan; use alexScanUser instead?") input__ IBOX(sc)

-- If the generated alexScan/alexScanUser functions are called multiple times
-- in the same file, alexScanUser gets broken out into a separate function and
-- increases memory usage. Make sure GHC inlines this function and optimizes it.
{-# INLINE alexScanUser #-}

alexScanUser user__ input__ IBOX(sc)
  = case alex_scan_tkn user__ input__ ILIT(0) input__ sc AlexNone of
  (AlexNone, input__') ->
    case alexGetByte input__ of
      Nothing ->
#ifdef ALEX_DEBUG
                                   Debug.Trace.trace ("End of input.") $
#endif
                                   AlexEOF
      Just _ ->
#ifdef ALEX_DEBUG
                                   Debug.Trace.trace ("Error.") $
#endif
                                   AlexError input__'

  (AlexLastSkip input__'' len, _) ->
#ifdef ALEX_DEBUG
    Debug.Trace.trace ("Skipping.") $
#endif
    AlexSkip input__'' len

  (AlexLastAcc k input__''' len, _) ->
#ifdef ALEX_DEBUG
    Debug.Trace.trace ("Accept.") $
#endif
    AlexToken input__''' len ((Data.Array.!) alex_actions k)


-- Push the input through the DFA, remembering the most recent accepting
-- state it encountered.

alex_scan_tkn user__ orig_input len input__ s last_acc =
  input__ `seq` -- strict in the input
  let
  new_acc = (check_accs (alex_accept `quickIndex` IBOX(s)))
  in
  new_acc `seq`
  case alexGetByte input__ of
     Nothing -> (new_acc, input__)
     Just (c, new_input) ->
#ifdef ALEX_DEBUG
      Debug.Trace.trace ("State: " ++ show IBOX(s) ++ ", char: " ++ show c ++ " " ++ (show . chr . fromIntegral) c) $
#endif
      case fromIntegral c of { IBOX(ord_c) ->
        let
                base   = alexIndexInt32OffAddr alex_base s
                offset = PLUS(base,ord_c)

                new_s = if GTE(offset,ILIT(0))
                          && let check  = alexIndexInt16OffAddr alex_check offset
                             in  EQ(check,ord_c)
                          then alexIndexInt16OffAddr alex_table offset
                          else alexIndexInt16OffAddr alex_deflt s
        in
        case new_s of
            ILIT(-1) -> (new_acc, input__)
                -- on an error, we want to keep the input *before* the
                -- character that failed, not after.
            _ -> alex_scan_tkn user__ orig_input
#ifdef ALEX_LATIN1
                   PLUS(len,ILIT(1))
                   -- issue 119: in the latin1 encoding, *each* byte is one character
#else
                   (if c < 0x80 || c >= 0xC0 then PLUS(len,ILIT(1)) else len)
                   -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
#endif
                   new_input new_s new_acc
      }
  where
        check_accs (AlexAccNone) = last_acc
        check_accs (AlexAcc a  ) = AlexLastAcc a input__ IBOX(len)
        check_accs (AlexAccSkip) = AlexLastSkip  input__ IBOX(len)
#ifndef ALEX_NOPRED
        check_accs (AlexAccPred a predx rest)
           | predx user__ orig_input IBOX(len) input__
           = AlexLastAcc a input__ IBOX(len)
           | otherwise
           = check_accs rest
        check_accs (AlexAccSkipPred predx rest)
           | predx user__ orig_input IBOX(len) input__
           = AlexLastSkip input__ IBOX(len)
           | otherwise
           = check_accs rest
#endif

data AlexLastAcc
  = AlexNone
  | AlexLastAcc !Int !AlexInput !Int
  | AlexLastSkip     !AlexInput !Int

data AlexAcc user
  = AlexAccNone
  | AlexAcc Int
  | AlexAccSkip
#ifndef ALEX_NOPRED
  | AlexAccPred Int (AlexAccPred user) (AlexAcc user)
  | AlexAccSkipPred (AlexAccPred user) (AlexAcc user)

type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool

-- -----------------------------------------------------------------------------
-- Predicates on a rule

alexAndPred p1 p2 user__ in1 len in2
  = p1 user__ in1 len in2 && p2 user__ in1 len in2

--alexPrevCharIsPred :: Char -> AlexAccPred _
alexPrevCharIs c _ input__ _ _ = c == alexInputPrevChar input__

alexPrevCharMatches f _ input__ _ _ = f (alexInputPrevChar input__)

--alexPrevCharIsOneOfPred :: Array Char Bool -> AlexAccPred _
alexPrevCharIsOneOf arr _ input__ _ _ = arr Data.Array.! alexInputPrevChar input__

--alexRightContext :: Int -> AlexAccPred _
alexRightContext IBOX(sc) user__ _ _ input__ =
     case alex_scan_tkn user__ input__ ILIT(0) input__ sc AlexNone of
          (AlexNone, _) -> False
          _ -> True
        -- TODO: there's no need to find the longest
        -- match when checking the right context, just
        -- the first match will do.
#endif
{-# LINE 96 "src/Zayin/Lexer.x" #-}
-- String handling state
beginString :: String -> Lexer Token
beginString _ = do
  pushStartCode string
  scan

endString :: String -> Lexer Token
endString _ = do
  popStartCode
  scan

-- EOF handling
handleEOF = pushStartCode eof *> scan

doEOF _ = do
  t <- Zayin.Lexer.Support.layout
  case t of
    Nothing -> do
      popStartCode
      pure TkEOF
    _ -> do
      popLayout
      pure TkVClose

scan :: Lexer Token
scan = do
  input@(Input _ _ _ string) <- gets lexerInput
  startcode <- startCode
  case alexScan input startcode of
    AlexEOF -> handleEOF
    AlexError (Input _ _ _ inp) ->
      throwError $ "Lexical error: " ++ show (head inp)
    AlexSkip input' _ -> do
      modify' $ \s -> s { lexerInput = input' }
      scan
    AlexToken input' tokl action -> do
      modify' $ \s -> s { lexerInput = input' }
      action (take tokl string)

-- Layout handling
layoutKw t _ = do
  pushStartCode Zayin.Lexer.layout
  pure t

openBrace _ = do
  popStartCode
  pushLayout ExplicitLayout
  pure TkOpen

startLayout _ = do
  popStartCode
  reference <- Zayin.Lexer.Support.layout
  col       <- gets (inpColumn . lexerInput)
  if Just (LayoutColumn col) <= reference
    then pushStartCode empty_layout
    else pushLayout (LayoutColumn col)
  pure TkVOpen

emptyLayout _ = do
  popStartCode
  pushStartCode newline
  pure TkVClose

offsideRule _ = do
  context <- Zayin.Lexer.Support.layout
  col <- gets (inpColumn . lexerInput)

  let continue = popStartCode *> scan

  case context of
    Just (LayoutColumn col') -> do
      case col `compare` col' of
        EQ -> do
          popStartCode
          pure TkVSemi
        GT -> continue
        LT -> do
          popLayout
          pure TkVClose
    _ -> continue
