[ TestCase "42" "42\n" "basic integer",
    TestCase "0" "0\n" "zero",
    TestCase "123456789" "123456789\n" "large number",
    TestCase "true" "true\n" "boolean true",
    TestCase "false" "false\n" "boolean false",
    TestCase "nil" "nil\n" "nil (unit) value",
    TestCase "5 + 3" "8\n" "addition",
    TestCase "10 - 4" "6\n" "subtraction",
    TestCase "5 == 5" "true\n" "equal numbers",
    TestCase "5 == 6" "false\n" "unequal numbers",
    TestCase "5 < 10" "true\n" "less than",
    TestCase "10 < 5" "false\n" "not less than",
    TestCase "10 > 5" "true\n" "greater than",
    TestCase "5 > 10" "false\n" "not greater than",
    TestCase "isInt(42)" "true\n" "isInt on number",
    TestCase "isInt(true)" "false\n" "isInt on boolean",
    TestCase "isZero(0)" "true\n" "isZero on zero",
    TestCase "isZero(1)" "false\n" "isZero on non-zero",
    TestCase "isNil(nil)" "true\n" "isNil on unit",
    TestCase "isNil(0)" "false\n" "isNil on number",
    TestCase "isBool(true)" "true\n" "isBool on boolean",
    TestCase "isBool(0)" "false\n" "isBool on number",
    TestCase "6 * 7" "42\n" "multiplication",
    TestCase "15 / 3" "5\n" "division",
    TestCase "17 % 5" "2\n" "modulo",
    TestCase "2 * 3 + 4" "10\n" "multiplication and addition",
    TestCase "10 - 6 / 2" "7\n" "subtraction and division",
    TestCase "let x = 5" "5\n" "basic let binding - implicit body",
    TestCase "let x = true" "true\n" "tail position boolean let",
    TestCase "let x = false" "false\n" "tail position boolean let",
    TestCase "let x = true; isBool(x)" "true\n" "boolean in non-tail context",
    TestCase "let x = 5; x + 3" "8\n" "let binding with arithmetic",
    TestCase "let\n  x = 5\n  y = 3\nx + y" "8\n" "nested let bindings",
    TestCase "let\n  f = 42\n  g = f\ng" "42\n" "simple variable forwarding",
    TestCase "let\n  x = 1\n  y = 2\n z = 3\nx + y + z" "6\n" "multiple let bindings",
    TestCase "fn f(x) = x + 1\nf(41)" "42\n" "simple function call",
    TestCase "fn f(x,y) = x + y\nf(20,22)" "42\n" "function with multiple args",
    TestCase "fn f(x) = if x == 0 then 0 else x + f(x-1)\nf(5)" "15\n" "recursive function",
    TestCase "(fn (x) = x + 1)(5)" "6\n" "anonymous function: single argument",
    TestCase "(fn (x, y) = x - y)(10, 4)" "6\n" "anonymous function: two arguments",
    TestCase "(fn () = 42)()" "42\n" "anonymous function: no arguments",
    TestCase "let f = fn (x) = x * 2; f(21)" "42\n" "anonymous function: in let binding",
    TestCase "(fn (x) = (fn(y) = y + 1))(5)(7)" "8\n" "anonymous function: nested arrow functions"
  ]
